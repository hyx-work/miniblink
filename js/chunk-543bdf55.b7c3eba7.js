(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-543bdf55"],{"419c":function(i,e,t){"use strict";var n=t("7fea"),l=t.n(n);l.a},"7fea":function(i,e,t){},f226:function(i,e,t){"use strict";t.r(e);var n=function(){var i=this,e=i.$createElement,t=i._self._c||e;return t("div",{attrs:{id:"doc-page"}},[t("div",{staticClass:"container"},[t("div",{staticClass:"side-bar"},[t("div",{staticClass:"side-bar-wrap"},i._l(i.sideNav,function(e,n){return t("div",{key:n,staticClass:"side-bar-item",class:{"side-bar-item-active":i.active==e.id},on:{click:function(t){i.active=e.id}}},[i._v(i._s(e.title))])}),0)]),t("div",{staticClass:"body"},[t("div",{staticClass:"body-wrap"},[1==i.active?t("div",{staticClass:"doc-item"},[t("div",{staticClass:"doc-item-title"},[i._v("前言")]),i._m(0)]):i._e(),2==i.active?t("div",{staticClass:"doc-item"},[t("div",{staticClass:"doc-item-title"},[i._v("Miniblink是什么")]),i._m(1)]):i._e(),3==i.active?t("div",{staticClass:"doc-item"},[t("div",{staticClass:"doc-item-title"},[i._v("API")]),t("div",{staticClass:"doc-item-content"},[t("div",{staticClass:"api-list"},i._l(i.apis,function(e,n){return t("div",{key:n,staticClass:"api-list-item"},[e.del?t("h3",{staticStyle:{color:"#ff2400"}},[t("del",[i._v("["+i._s(e.id)+"] "+i._s(e.title))]),i._v(" （已作废）")]):t("h3",[i._v("["+i._s(e.id)+"] "+i._s(e.title))]),t("p",[i._v(i._s(e.desc?e.desc:"暂无接口描述信息"))]),Object.keys(e.params).length>0?t("div",{staticClass:"table params"},[i._m(2,!0),i._l(e.params,function(e,n,l){return t("div",{key:l,staticClass:"table-row"},[t("div",{staticClass:"table-col"},[i._v(i._s(n))]),t("div",{staticClass:"table-col"},[i._v(i._s(e))])])})],2):i._e(),e.tips?t("blockquote",{staticClass:"api-tips"},[i._v(i._s(e.tips))]):i._e()])}),0)])]):i._e(),4==i.active?t("div",{staticClass:"doc-item"},[t("div",{staticClass:"doc-item-title"},[i._v("mini-electron模式")]),i._m(3)]):i._e(),5==i.active?t("div",{staticClass:"doc-item"},[t("div",{staticClass:"doc-item-title"},[i._v("miniblink其他语言绑定及例程")]),i._m(4)]):i._e()])])])])},l=[function(){var i=this,e=i.$createElement,t=i._self._c||e;return t("div",{staticClass:"doc-item-content"},[t("p",[i._v("miniblink使用了wke的接口。wke的相关介绍可以google一下。")]),t("p",[i._v("总的来说，miniblink的接口是纯C导出，只要使用wke.h即可加载。无需.lib。")]),t("blockquote",[t("p",[i._v("另外，请勿跨线程调用所有接口（除非接口有特殊申明）")]),t("p",[i._v("所有接口如果返回的是const utf8*，const wchar_t*类型的字符串，均不需要手动释放")]),t("p",[i._v("miniblink暂时只支持windows系统")])])])},function(){var i=this,e=i.$createElement,t=i._self._c||e;return t("div",{staticClass:"doc-item-content"},[t("h3",[i._v("miniblink是什么？")]),t("p",[i._v("Miniblink是一个追求极致小巧的浏览器内核项目，全世界第三大流行的浏览器内核控件。\n                        ")]),t("p",[i._v("其基于chromium最新版内核，去除了chromium所有多余的部件，只保留最基本的排版引擎blink。")]),t("p",[i._v("Miniblink保持了10M左右的极简大小，是所有同类产品最小的体积，同时支持windows xp、npapi。")]),t("h3",[i._v("为什么要做miniblink？")]),t("p",[i._v("市面上作为嵌入的组件的可用的浏览器内核，不外乎这几个：webkit、cef、nwjs、electron。")]),t("p",[i._v("cef：优点是由于集成的chromium内核，所以对H5支持的很全，同时因为使用的人也多，各种教程、示例，资源很多。但缺点很明显，太大了。最新的cef已经夸张到了100多M，还要带一堆的文件。同时新的cef已经不支持xp了（chromium对应版本是M49）。而且由于是多进程架构，对资源的消耗也很夸张。如果只是想做个小软件，一坨文件需要带上、超大的安装包，显然不能忍受。")]),t("p",[i._v("nwjs，或者最近大火的electron：和cef内核类似，都是chromium内核。缺点和cef一模一样。优点是由于可以使用nodejs的资源，同时又自带了各种api的绑定，所以可以用的周边资源非常丰富；而基于js的开发方案，使得前端很容易上手。所以最近N多项目都是基于nwjs或electron来实现。例如vscode，atom等等。")]),t("p",[i._v("原版webkit：现在官网还在更新windows port，但显然漫不在心，而且最新的webkit也很大了，超过20几M。最关键的是，周边资源很少，几乎没人再基于webkit来做开发。同时由于windows版的saferi已经停止开发了，所以用webkit就用不了他的dev tools了。这是个大遗憾。")]),t("p",[i._v("WKE：这是个很老的webkit内核的裁剪版了。小是小，但bug太多了。")]),t("h3",[i._v("那么关键点来了，使用miniblink有啥好处呢？？")]),t("p",[i._v("首先，miniblink对大小要求非常严格。原版chromium、blink里对排版渲染没啥大用的如音视频全都被砍了，只专注于网页的排版和渲染。甚至为了裁剪大小，我不惜使用vc6的crt来跑mininblink(见我上篇文章)。这个也算前无古人后无来者了。")]),t("p",[i._v("其次，miniblink紧跟最新chromium，这意味着chromium相关的资源都可以利用。在未来的规划里，我是打算把electron的接口也加上的，这样可以无缝替换electron。使用miniblink的话，开发调试时用原版electron，发布的时候再替换掉那些dll，直接可以无缝切换，非常方便。")]),t("h3",[i._v("miniblink如何使用？")]),t("p",[i._v("Miniblink导出了electron、WKE的接口，可以直接无缝替换现有的electron、WKE项目。")]),t("p",[i._v("早期miniblink还导出了CEF接口，不过现在已被废弃。")]),t("p",[i._v("miniblink有个小demo，从demo里可以看到，brackct这个基于cef的开源编辑器，已经顺利由miniblink跑起来了。现在electron的接口已做好，vscode跑起来了。")]),t("p",[i._v("更详细的使用文档见本页其他文章。")]),t("h3",[i._v("miniblink如何裁剪到这么小？")]),t("p",[i._v("这个比较复杂了。主要就是把blink从chromium抽离了出来，同时补上了cc层（硬件渲染层）。现在的blink，已经不是当年的那个webkit了，渲染部分全走cc层，复杂无比。我这大半年都在重写他那个蛋疼又复杂的cc层。")]),t("h3",[i._v("和webkit比，miniblink架构有什么优势")]),t("p",[i._v("现在的webkit版本，已经比miniblink落后太多了。blink一直在加入各种极富创造力和想象力的功能、组件。例如，blink早就加入多线程解析html token、blink gc回收器、多线程录制回放渲染机制。这些能让blink的解析渲染速度极大提升。下一次，我会先开源出blink gc组件，这东西很有意思，在c++里硬是搞出了一个垃圾回收机制，能让你像写java一样写c++。")])])},function(){var i=this,e=i.$createElement,t=i._self._c||e;return t("div",{staticClass:"table-row table-header"},[t("div",{staticClass:"table-col"},[i._v("参数名")]),t("div",{staticClass:"table-col"},[i._v("说明")])])},function(){var i=this,e=i.$createElement,t=i._self._c||e;return t("div",{staticClass:"doc-item-content"},[t("h3",[i._v("mini-electron模式")]),t("p",[i._v("目前miniblink已支持mini-eletcron模式。electron是目前最流行的跨平台PC开发框架，相当于把nodejs和chromium结合起来，可以同时使用两者的功能。（如果不想看废话，需要了解怎么使用的人，可以拉到文末）")]),t("p",[i._v("nodejs使用了v8，而miniblink因为本身就是chromium的blink+v8，所以某天我大胆的猜测，只要加上nodejs的功能，再补上electron为了撮合这几个部件的代码，就可以实现超级精简的electron了。")]),t("p",[i._v("事实证明这样完全没问题，mini-eletcron目前已实现原版electron大约90%的接口。绝大部分electron app已能跑起。")]),t("p",[i._v("mini-eletcron的实现方式很简单，由两部分组成：")]),t("p",[i._v("1，mini-eletcron.exe；")]),t("p",[i._v("2，nodejs.dll；")]),t("p",[i._v("先看mini-electron.exe部分。这是个只有几百K的小exe（原版的electron.exe有大约5-60m）。其目的是调用nodejs.dll导出的接口，以模拟electron的功能。由于原版electron是开源的，所以我直接挪用了很多代码。当然，需要做大量改动。原因有二：一是因为原版代码大量依赖chromium的base、net等基础库，所以不得不对这些代码进行重写；")]),t("p",[i._v("二是将原版使用了chromium的web相关功能，通过调用nodejs.dll提供的接口来实现。")]),t("p",[i._v("其中web相关功能，我巧妙的通过miniblink导出的C接口来实现，而其nodejs相关，我是直接将nodejs的代码完整的编译进了nodejs.dll。")]),t("p",[i._v("所以，这里说到的第二个nodejs.dll部分，其实已经不是网上原版的nodejs.dll了，而是我将miniblink的代码和nodej.dll的代码简单的编译在一个dll中所产生的文件。其中v8部分是共用的。所以仅仅在miniblink的基础上，增加了几M而已。")]),t("p",[i._v("所以，这也解释了为什么每次发出来的编译好的miniblink的包，主dll都叫node.dll。因为需要伪装成nodejs。")]),t("p",[i._v("但mini-electron和原版并不是完全一样。有个最大的不同在于，原版因为chromium的限制，必须使用多进程架构。了解electron使用方式的人都知道，electron分成主进程和渲染进程。其中主进程跑了一个nodejs上下文环境，而每个渲染进程又跑了一个nodejs环境。 主进程同时也是chromium的主进程。主进程的nodejs环境用来调用chromium的content api来实现操纵chromium的web能力。")]),t("p",[i._v("而mini-electron不同， 因为miniblink的架构本身就是单进程，所以为了简单起见，我使用单进程多线程来模拟electron多进程。其中，主线程一个nodejs环境，渲染线程跑一个miniblink的webview。注意，这里只有一个渲染线程，不管有多少个webview。这是blink的架构限制的。同时主线程通过异步的调用miniblink的webview接口（又称为wke接口）来实现操纵web能力。")]),t("p",[i._v('这也就造成了一个技术上的限制：mini-electron不能实现同时加载多个同样的原生dll（在nodejs里，这部分是以".node"结尾的文件）。')]),t("p",[i._v("这是windows的dll加载机制限制。所以对于那些同时在主进程和渲染进程都加载了原生dll的应用，mini-electron会报错。例如vscode就在主进程和渲染进程里都加载了keymap.node。")]),t("p",[i._v("但这个限制是可以通过简单的改造js来绕过的。electron实现了remote功能，可以通过remote.require来指挥主进程去加载dll，并远程使用dll的接口。我就稍微改了下keymap的js，便完美的跑起了vscode。事实上，应该不会有人真的需要两个进程同时使用一个dll。绝大部分情况可以通过remote来规避。")]),t("h3",[i._v("mini-electron有哪些优势")]),t("p",[i._v("先看electron有哪些劣势：")]),t("p",[i._v("1，安装包的大小难以优化，除非你搞明白vscode团队是如何做到的。")]),t("p",[i._v("2，Electron因为需要一份chromium库的拷贝，因此再小的app，内存开销都不少。")]),t("p",[i._v("3，多个Electron运行，是不能共享主进程资源的，也无法做关联性的优化，浏览器是有一套IPC进程做所有调度的。能有开销上的优化。")]),t("p",[i._v("所以，electron的劣势正好就是mini-electron的优势。")]),t("p",[i._v("此外，刚看到PWA也打算进军桌面市场。据我对PWA的了解，它在和mini-electron在上面几个点上并没任何优势，所以，你懂的……")]),t("h3",[i._v("mini-electron有哪些劣势")]),t("p",[i._v("1，目前还有几个模块没支持上，主要是session那块。")]),t("p",[i._v("2，单进程架构限制了无法多次加载同个dll。")])])},function(){var i=this,e=i.$createElement,t=i._self._c||e;return t("div",{staticClass:"doc-item-content"},[t("p",[i._v("需要说明的是，下面的url很多都是网友提供，非官方编写。所以可能和最新版miniblink不太兼容，出现问题也正常，仅供参考。")]),t("h3",[i._v("C#")]),t("p",[i._v("https://github.com/E024/MiniBlinkPinvoke")]),t("p",[i._v("https://github.com/E024/MiniBlinkPinvokeDemo")]),t("p",[i._v("https://gitee.com/kyozy/miniblinknet")]),t("p",[i._v("https://github.com/e024/miniblinkpinvokevip (这个是定制版的封装)")]),t("h3",[i._v("delphi")]),t("p",[i._v("https://github.com/yangyxd/wke-for-delphi")]),t("p",[i._v("https://gitee.com/LangjiApp/Wke4Delphi.git")]),t("h3",[i._v("SOUI")]),t("p",[i._v("https://gitee.com/Qyerp/KKPlayer/blob/master/KKPlayer/MainPage/KKWkeWebkit.cpp")]),t("p",[i._v("https://github.com/soui-demo/SweepingEdge")]),t("h3",[i._v("golang")]),t("p",[i._v("https://github.com/raintean/blink")]),t("h3",[i._v("C++")]),t("p",[i._v("https://github.com/iceb0y/miniblink_cxx_example")]),t("p",[i._v("https://github.com/weolar/mb-demo")]),t("p",[i._v("https://github.com/zhichao281/duilib-MiniBlinkBrowser")]),t("h3",[i._v("powerbuilder")]),t("p",[i._v("https://github.com/gaoqiangz/pfw")]),t("h3",[i._v("duilib")]),t("p",[i._v("https://github.com/zhichao281/duilib-MiniBlinkBrowser")])])}],c=(t("96cf"),t("3b8d")),s={data:function(){return{active:3,sideNav:[{id:1,title:"前言"},{id:2,title:"Miniblink是什么"},{id:3,title:"API"},{id:4,title:"mini-electron介绍"},{id:5,title:"其他语言绑定及例程"}],apis:[]}},created:function(){var i=Object(c["a"])(regeneratorRuntime.mark(function i(){var e;return regeneratorRuntime.wrap(function(i){while(1)switch(i.prev=i.next){case 0:return i.next=2,axios("/db.json");case 2:e=i.sent,this.apis=e.api,console.log(this.apis);case 5:case"end":return i.stop()}},i,this)}));function e(){return i.apply(this,arguments)}return e}()},o=s,a=(t("419c"),t("2877")),v=Object(a["a"])(o,n,l,!1,null,"440ee316",null);e["default"]=v.exports}}]);
//# sourceMappingURL=chunk-543bdf55.b7c3eba7.js.map